{"Classes/ListPaginator/Status.html#/s:13ListPaginatorAAC6StatusO7initialyADyxq__GAFmSeRzr0_lF":{"name":"initial","abstract":"<p>The paginator has been instantiated but no network requests have been performed yet.</p>","parent_name":"Status"},"Classes/ListPaginator/Status.html#/s:13ListPaginatorAAC6StatusO4idleyADyxq__GSb_tcAFmSeRzr0_lF":{"name":"idle(hasMore:)","abstract":"<p>The paginator is idle and not performing any requests. The <code>hasMore</code> associated value dictates whether there are more objects to be fetched or not.</p>","parent_name":"Status"},"Classes/ListPaginator/Status.html#/s:13ListPaginatorAAC6StatusO8fetchingyADyxq__GAFmSeRzr0_lF":{"name":"fetching","abstract":"<p>The paginator is currently fetching new items. This status may be used to display loading indicators in the client application.</p>","parent_name":"Status"},"Classes/ListPaginator/Status.html#/s:13ListPaginatorAAC6StatusO5erroryADyxq__Gs5Error_pcAFmSeRzr0_lF":{"name":"error(_:)","abstract":"<p>An error occured during the last request. This status may be used to display an error message and retry control in the client application.</p>","parent_name":"Status"},"Classes/ListPaginator/Status.html#/s:13ListPaginatorAAC6StatusO5errors5Error_pSgvp":{"name":"error","abstract":"<p>A convenience property which unwraps the <code>Error</code> from the <code>error(Error)</code> case.</p>","parent_name":"Status"},"Classes/ListPaginator/RequestProvider.html#/s:13ListPaginatorAAC15RequestProviderO9publisheryADyxq__G7Combine12AnyPublisherVys6ResultOyxs5Error_pGs5NeverOGSiccAFmSeRzr0_lF":{"name":"publisher(_:)","abstract":"<p>A Combine publisher which will perform a network request with a given page.  The publisher is expected to:</p>","parent_name":"RequestProvider"},"Classes/ListPaginator/RequestProvider.html#/s:13ListPaginatorAAC15RequestProviderO7closureyADyxq__GySi_ys6ResultOyxs5Error_pGctccAFmSeRzr0_lF":{"name":"closure(_:)","abstract":"<p>A simple closure which will perform a network request with a given page. This closure should perform its work and call back the provided completion block with the result of its network request.</p>","parent_name":"RequestProvider"},"Classes/ListPaginator/PagingStrategy.html#/s:13ListPaginatorAAC14PagingStrategyO9pageIndexyADyxq__GSi_tcAFmSeRzr0_lF":{"name":"pageIndex(startingFrom:)","abstract":"<p>For APIs which use a page index-based system. Typically an incrementing integer is sent as part of the request parameters. The  <code>startingFrom</code> associated value should provide the initial page number. You should typically pass <code>0</code> or <code>1</code> to define whether your endpoint is 0 or 1-based.</p>","parent_name":"PagingStrategy"},"Classes/ListPaginator/PagingStrategy.html#/s:13ListPaginatorAAC14PagingStrategyO10itemOffsetyADyxq__GAFmSeRzr0_lF":{"name":"itemOffset","abstract":"<p>For APIs which use an offset-based system. Typically an offset based on the last fetched <em>item</em>&lsquo;s index is passed to subsequent requests. For example, passing 0 for page one, receiving 20 results and then passing 20 for the next request and so on.</p>","parent_name":"PagingStrategy"},"Classes/ListPaginator/PagingStrategy.html":{"name":"PagingStrategy","abstract":"<p>Defines how the paginator should generate page numbers for building network requests. This will be based on how the target API works with paging.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator/RequestProvider.html":{"name":"RequestProvider","abstract":"<p>Allows the client to choose between using a Combine publisher or a simple closure for fetching new pages of data.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator/Status.html":{"name":"Status","abstract":"<p>Tracks the current pagination status. Is used internally for blocking duplicate requests but this may also be observed to display progress indicators and error messages within the client application.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html#/s:13ListPaginatorAAC7resultsSayq_Gvp":{"name":"results","abstract":"<p>An array of view-ready <code>Item</code>s. Observable.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html#/s:13ListPaginatorAAC6statusAB6StatusOyxq__Gvp":{"name":"status","abstract":"<p>The current pagination status. Observable.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html#/s:13ListPaginatorAAC17completionHandlerys6ResultOyxs5Error_pGcSgvp":{"name":"completionHandler","abstract":"<p>An optional closure called after each page&rsquo;s request is made. Non-Combine implementations which choose not to make use of the @Published attributes of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ListPaginator.html#/s:13ListPaginatorAAC7resultsSayq_Gvp\">results</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ListPaginator.html#/s:13ListPaginatorAAC6statusAB6StatusOyxq__Gvp\">status</a></code> may prefer to use this system for updating the client&rsquo;s UI.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html#/s:13ListPaginatorAAC17fetchMoreIfNeeded7Combine18PassthroughSubjectCyyts5NeverOGvp":{"name":"fetchMoreIfNeeded","abstract":"<p>A passthrough subject which should be triggered when new data is to be fetched. Typically you will call <code>fetchMoreIfNeeded.send()</code> when users scroll near the bottom of paginated content.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html#/s:13ListPaginatorAAC15requestProviderAB07RequestD0Oyxq__GSgvp":{"name":"requestProvider","abstract":"<p>A property which defines how the client application will provide data for ListPaginator to consume. ListPaginator currently supports network requests via either a Combine publisher or a simple Swift closure. Both are expected to return a Swift <code>Result</code> with the success data type matching this class&rsquo;s generic <code>Response</code> type. See the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ListPaginator/RequestProvider.html\">RequestProvider</a></code> documentation for more details.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html#/s:13ListPaginatorAAC8strategy20responseItemsKeyPathAByxq_GAB14PagingStrategyOyxq__G_s0fG0CyxSayq_GGtcfc":{"name":"init(strategy:responseItemsKeyPath:)","abstract":"<p>Initializer for <code>ListPaginator</code>. Provide it with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ListPaginator/PagingStrategy.html\">PagingStrategy</a></code> used by your application and the property keypath where your <code>Item</code>s can be found within each <code>Response</code>.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html#/s:13ListPaginatorAAC5resetyyF":{"name":"reset()","abstract":"<p>Removes all results and resets the status and pagination offsets.</p>","parent_name":"ListPaginator"},"Classes/ListPaginator.html":{"name":"ListPaginator","abstract":"<p>ListPaginator simplifies the fetching and state management for lists of data populated from a paginated endpoint. It&rsquo;s main aims are to maintain correct page offsets, fetch statuses and retain responses from paginated API endpoints.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"}}